import{o,c as i,k as r,q as l,s as m,B as a,e,aa as t}from"./modules/vue-D0pgLiKe.js";import{I as c}from"./slidev/default-CS-TogEr.js";import{u as b,f as d}from"./slidev/context-YKtqwHZx.js";import"./index-DzybD9-7.js";import"./modules/shiki-B2vYA8T0.js";const p=e("h1",null,"WebAssembly",-1),f=e("blockquote",null,[e("p",null,"WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.")],-1),u=e("ul",null,[e("li",null,[e("strong",null,"Efficient and fast"),t(" The Wasm "),e("a",{href:"https://webassembly.org/docs/semantics/"},"stack machine"),t(" is designed to be encoded in a size- and load-time-efficient "),e("a",{href:"https://webassembly.org/docs/binary-encoding/"},"binary format"),t(". WebAssembly aims to execute at native speed by taking advantage of "),e("a",{href:"https://webassembly.org/docs/portability/#assumptions-for-efficient-execution"},"common hardware capabilities"),t(" available on a wide range of platforms.")]),e("li",null,[e("strong",null,"Safe"),t(" WebAssembly describes a memory-safe, sandboxed "),e("a",{href:"https://webassembly.org/docs/semantics/#linear-memory"},"execution environment"),t(" that may even be implemented inside existing JavaScript virtual machines. When "),e("a",{href:"https://webassembly.org/docs/web/"},"embedded in the web"),t(", WebAssembly will enforce the same-origin and permissions security policies of the browser.")]),e("li",null,[e("strong",null,"Open and debuggable"),t(" WebAssembly is designed to be pretty-printed in a "),e("a",{href:"https://webassembly.org/docs/text-format/"},"textual format"),t(" for debugging, testing, experimenting, optimizing, learning, teaching, and writing programs by hand.")]),e("li",null,[e("strong",null,"Part of the open web platform"),t(" WebAssembly is designed to maintain the versionless, feature-tested, and backwards-compatible "),e("a",{href:"https://webassembly.org/docs/web/"},"nature of the web"),t(". WebAssembly modules will be able to call into and out of the JavaScript context and access browser functionality through the same Web APIs accessible from JavaScript.")])],-1),g={__name:"slides.md__slidev_7",setup(h){const{$slidev:y,$nav:w,$clicksContext:s,$clicks:_,$page:v,$renderContext:x,$frontmatter:n}=b();return s.setup(),(W,k)=>(o(),i(c,l(m(a(d)(a(n),6))),{default:r(()=>[p,f,u]),_:1},16))}},C=g;export{C as default};
